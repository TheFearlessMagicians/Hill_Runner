<!DOCTYPE html>
<html>
<head>
	<title> Hill Runners!</title>
	 <meta charset="utf-8">
	  <meta name="viewport" content="width=device-width, initial-scale=1">
	  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
	  <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet'>
	  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
	  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
	  <!--<link rel="stylesheet" href="/resources/demos/style.css">-->
	  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
	  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
      <script src = "/gmapsStyle.js"></script>
	 <link rel="stylesheet" type="text/css" href="/style.css">
</head>
<body >
	<div class = "container" id = "phoneContainer">

		<!--	<div id = "gameconsole"></div>
			<script src= "http://unpkg.com/react@16.0.0/umd/react.development.js"></script>
			<script src= "http://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>
			<script src= "../public/script/JSX.js"></script>-->
			<div class = "container" style= "/*background-color: #006699;*/ width:100%; font-family:Raleway; color: white">
				<h1 id="name"><strong>Name</strong></h1>
	 			<h2 id="level">Level: </h2>
				<h2 id="experience">Exp: </h2>
                				  <!-- Trigger the modal with a button -->
				  <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" id="makeQuest">Make Quest</button>
			 </div>
			 <div class= "container" id= "phone" style= "width:100%">
			  <!-- Modal -->
			  <div class="modal fade" id="myModal" role="dialog">
			    <div class="modal-dialog modal-lg">
			      <div class="modal-content">
			        <div class="modal-header">
			          <button type="button" class="close" data-dismiss="modal">&times;</button>
			          <h3 class="modal-title">Make Quest</h4>
			        </div>
			        <div class="modal-body">

				          <form  id="questForm">
				          	  <label>Name</label>
	                          <input type="text" placeholder="Enter Name Of Quest" id="name" class="form-control" required>

	                          <label>Describe your quest </label>
							  <textarea placeholder="Describe Your Quest Here." rows="3" class="form-control" id="description" required></textarea>

							  <label>Reward</label>

	                          <input type="number" placeholder="Enter Reward" id="reward" class="form-control" required>


	                          <label>Address</label>
	                          <input type="text" placeholder="Enter Where To Meet" id="address" class="form-control" required>

							  <input type = "submit" id= "submitQuest" class="btn-md btn-primary form-control" style= "margin-top: 20px" >
						</form>

			        </div>
			        <div class="modal-footer">
			          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			        </div>
			      </div>
			    </div>
			  </div>



			<!-- Quest Table -->

			<h1 style= "color: white;"> <i class="glyphicon glyphicon-thumbs-up"></i> Quest <small style= "color: space-grey;"> click on quest for details</small></h1>
			
			<table class="table" id= "tablestyle">
			      <thead>
			        <tr>
			          <th>Quest Name</th>
			          <th>Rewards</th>
			          <th>Location</th>
			        </tr>
			      </thead>
			      <tbody id = "quests">
			      </tbody>
		     </table>
             <div id="dialogContainer" style="visibility: hidden; height:0%; overflow:hidden;">

             </div>
            <div class="container" id="mapcontainer" style="height:50%; width: 100%">
                <div id="map" style="height: 100%">

                </div>
            </div>
            <script>
            //Initialisation //
            var ID = "<%- ID %>";
            var USER = <%- JSON.stringify(USER) %>;
            var QUESTS =<%- JSON.stringify(QUESTS )%>;
            var STATE = USER.state;
            function addToQuestTable(quest){

                console.log(`adding ${quest.name} to tbody.`);
                console.log(`keys: ${Object.keys(quest)}`)
            	 $(`tbody#quests`).append(`
        	<tr id ="${quest._id}">
	        	<td>${quest.name}</td>
	       		<td> ${quest.reward}</td>
	       		<td> ${quest.address}</td>
                </tr>
       		`);
            $('div#dialogContainer').append(`
                <div id="dialog" class="${quest._id}" title="Quest Description">
                        <p>${quest.description}</p>
                        <button class="btn btn-default" id = ${quest._id} > Accept </button>
                </div>`);
            	};
            function changeUserStat(mode,level,exp){
            if (mode=='add'){
                USER.level+=level;
                USER.experience +=exp;
                $('h2#level').html(`Level ${USER.level}`);
                $('h2#experience').html(`EXP: ${USER.experience}`);
            }else if(mode=='set'){
                $('h2#level').html(`Level ${level}`);
                $('h2#experience').html(`EXP: ${exp}`);

            }
            }
            	QUESTS.forEach((quest)=>{
            		  addToQuestTable(quest);
            	});
                $('h1#name').html(USER.name);
                changeUserStat('set',USER.level,USER.experience);
                //changeUserStat(USER.level,USER.experience);


            </script>

			<script>
				$(`tbody#quests > tr`).on(`click`, (evt)=>{
                    console.log(`clicked tr#${evt.currentTarget.id}`)
					$( `div#dialog.${evt.currentTarget.id}` ).dialog(/*'open'*/);
				});
		 	 </script>




			<!-- div class="container" id = "questLog">
				<ul id = "quests">
				</ul>
			</div> -->



			<!-- maps code -->
            <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
            </script>
            <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%- gmapsCredential %>&callback=initMap">
            </script>
        <!--    <script src= " ../public/script/maps.js" ></script>-->

        </div>

	</div>
</body>
</html>

<!-- socket code -->
	<script src="/socket.io/socket.io.js"></script>
<script>
/*Note: socket code needs access to these global variables:
ID: your id.
*/

    var socket = io.connect("http://localhost:8000");
    socket.on('connect',()=>{
                //Bind your ID to your socket when you connect so the server knows who you are.
        console.log(`added my username:${ID} `)
        socket.emit('add_username',ID);

    });

    //---------When you assign a quest-------------//:
    $('input#submitQuest').on('click',function(event){
        questObject= {
            'name': $('input#name').val(),
            'description':$('textarea#description').val(),
            'reward':$('input#reward').val(),
            'requester':ID,
            'hillrunner':'', // Empty for now. Will be assigned later when a hillrunner accepts this quest.
            'address':$('input#address').val(),
            'startcoordinates':[-118.444334,34.070501], //TODO: This is still hardcoded
            'endcoordinates':[-118.449858,34.072019], //TODO: This is still hardcoded.
            'state':'ready'
        };
        STATE = "quest_assigner";
        console.log('inserting questobject')
        socket.emit('assign_quest',questObject);

    });

    //----------------When YOU accept a quest----------------//:
    $(' div#dialog >button').on('click',function(event){
        if (STATE == 'none' ){
        	console.log(event.currentTarget.id);
        	questId = event.currentTarget.id;
        	socket.emit('accept_quest',{'id':questId,'hillrunner':ID});
        	//Disable YOUR makeQuest functionality.
            $(`#makeQuest`).slideUp(0.8);
        	$(`#makeQuest`).on('click',function() {
       			 $(this).prop("disabled",true);
    		});
            STATE = 'hillrunner';
        }
        else if(STATE == 'quest_assigner'){
            console.log('youre a quest assigner, you cannot hillrun for someone!');
            alert('you assigned a quest for someone, you cannot hillrun!');
        }
        else{
            console.log('youre hillrunning for someone!');
            alert('you\'re hillrunning for someone')
        }
    });

//---------what to do when someone accepted a quest-----------//
    socket.on('user_accepted_quest',(id)=>{
        // don't display that quest anymore
        console.log(`removing ${id}`)
         $(`tbody#quests > tr#${id}`).remove();
    });

//---------What to do when someone made a new quest.--------//
    socket.on('user_assigned_quest',(quest)=>{
       addToQuestTable(quest);
    });

//-------What to do when YOU completed a quest. ------------//
    socket.on('quest_completed',(quest)=>{
                STATE = 'none';
                $(`#makeQuest`).slideDown(0.8);
                changeUserStat('add',1,100); //TODO: Hardcoded.
    });
</script>

<script>
                        //Called when gmaps loads:
                          function initMap() {
                              //GEO LOCATION
                              //var infoWindow = new google.maps.InfoWindow;

                              // Try HTML5 geolocation.
                              console.log('initmap called.')
                            //  if (navigator.geolocation) {
                  //                navigator.geolocation.getCurrentPosition(function(position) {

                                    //Hardcoded UCLA position:
                                      var pos = {
                                          lat:  34.068921,//position.coords.latitude
                                          lng:-118.445181,//position.coords.longitude
                                      };


                                      var map = new google.maps.Map(document.getElementById('map'), {
                                          zoom: 13,
                                          center: pos,
                                          styles: gmapsStyle
                                      });
                                      console.log('creating a map here.');
                                      // Create an array of alphabetical characters used to label the markers.
                                      var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

                                      // -------------------REAL CODE FOR MAP UPDATING ----------------------------------//
                            //          socket.on('QUESTS_NEAR_USER', function(QUESTS) {
                            //TODO: We need a QUESTS object for initialisation.
                                                //console.log('QUESTS near user response received.');
                                                console.log(`no of QUESTS queried: ${QUESTS.length}`)
                                                   var markers= QUESTS.map(function(quest, i) {

                                                               // console.log(dog.name+' marker added.'+i)
                                                        return new google.maps.Marker({
                                                            position: new google.maps.LatLng(quest.startcoordinates[1], quest.startcoordinates[0]),// quest: [lng,lat]. maps: [lat,lng]
                                                            label: labels[i % labels.length],
                                                           map:map,//,
                                                           icon:{url:"https://png.icons8.com/metro/1600/finish-flag.png",
                                                                    scaledSize: new google.maps.Size(25, 25)},
                                                           name:quest.name
                                                        });
                                                    });


                                                    var infowindows=[];
                                                         // Add a marker clusterer to manage the markers.

                                                         markers.forEach((marker,i)=>{
                                                                   console.log('putting marker '+i)
                                                                 infowindows.push(  new google.maps.InfoWindow({
                                                                                content:marker.name//  getdogPopupString(marker.dogName,'public/QUESTS/samoyed-puppy.jpg',marker.dogUrl,'/user/'+marker.ownerUrl)
                                                                      }));
                                                                      google.maps.event.addListener(marker, 'click', function() {
                                                                                infowindows[i].open(map,this);
                                                         });
                                               });
                                                      var markerCluster = new MarkerClusterer(map, markers, { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
                                    //  });
                                                //    map.setCenter(pos);
                                                google.maps.event.addListener(map, 'tilesloaded', function(){
                                                    //If you want to create a loading screen for tilesloaded, make it finish here.
                                                    // $(`#loading`).css("display", "none");

                                                });


                                  }
</script>
